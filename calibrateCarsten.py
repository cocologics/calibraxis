'''
Test gyro calibration using measured iPhone positions.

22. Jan 2019, Carsten Haubold, Cocologics
'''

from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import absolute_import

import json

from calibraxis import Calibraxis

# points = [[0.006347309798002243, 0.001818526303395629, -0.9999781847000122],
#           [0.3722231090068817, 0.008081536740064621, -0.9281080961227417],
#           [-0.010231665335595608, 0.9982649087905884, -0.05798737704753876],
#           [-0.9985529184341431, -0.006402119062840939, -0.053397729992866516],
#           [0.945448100566864, 0.007680926937609911, 0.32568275928497314],
#           [-0.02403396926820278, -0.9996945261955261, 0.005752858240157366],
#           [-0.9858453273773193, 0.0023498821537941694, -0.1676408350467682],
#           [0.016348855569958687, -0.004297654610127211, -0.9998571276664734],
#           [-0.01670493744313717, 0.9953168034553528, -0.09521283209323883]]

# points = [[0.005217183846980333, 0.0005560629069805145, -0.9999862313270569],
#           [0.42887380719184875, 0.008483000099658966, -0.903324544429779],
#           [-0.9851692914962769, 0.007530793081969023, -0.17141976952552795],
#           [0.01322091743350029, 0.9658066034317017, -0.25892627239227295],
#           [0.980819821357727, -0.008544896729290485, -0.19472937285900116],
#           [0.017388606444001198, 0.2447543889284134, -0.9694291949272156],
#           [-0.3895476460456848, 0.029421914368867874, -0.9205362200737],
#           [0.004343800246715546, 0.024671224877238274, 0.9996860027313232],
#           [-0.015310902148485184, 0.013026083819568157, -0.9997979402542114]]

# points = [[0.007657991722226143, 0.0008600252913311124, -0.9999703168869019],
#           [-0.9933056235313416, 0.007703009527176619, -0.11525869369506836],
#           [0.9997497797012329, 0.01731608808040619, -0.014156547375023365],
#           [0.8659352660179138, 0.013486103154718876, -0.4999743402004242],
#           [-0.00515104690566659, 0.914946973323822, -0.4035411775112152],
#           [-0.9040549397468567, -0.01058601401746273, -0.4272850751876831],
#           [0.0015764416893944144, 0.9510921835899353, -0.308903306722641],
#           [-0.00444809440523386, 0.010902386158704758, 0.9999307990074158],
#           [-0.0140559496358037, 0.003922636155039072, -0.9998934864997864]]

# 9x the same measurement produces weird results
# points = [[0.002892735181376338, -0.0001611225015949458, -0.9999958276748657],
# [0.0030368685256689787, -0.0002496382512617856, -0.9999953508377075],
# [0.0030622724443674088, -0.00031240208772942424, -0.9999952912330627],
# [0.0031911679543554783, -0.00023977100499905646, -0.9999948740005493],
# [0.003248373279348016, -0.000394402421079576, -0.9999946355819702],
# [0.003097622888162732, -0.00040762548451311886, -0.9999951124191284],
# [0.0030505883041769266, -0.00038521556416526437, -0.9999952912330627],
# [0.0029863379895687103, -0.0004892286378890276, -0.9999954104423523],
# [0.0031080669723451138, -0.0006496456917375326, -0.9999949336051941],
# [0.0030850686598569155, -0.0009238461498171091, -0.9999948143959045]]

# # 1st round of measurements in a predefined order on iPhone XS
# points = [[0.9933000206947327, 0.003577831666916609, -0.11550916731357574],
# [-0.005321431905031204, 0.9936239123344421, -0.11261993646621704],
# [-0.9975690245628357, -0.007659002207219601, -0.0692627802491188],
# [-0.9995002746582031, 0.006475935224443674, -0.0309427622705698],
# [0.010659905150532722, 0.9994256496429443, 0.032165419310331345],
# [0.9999270439147949, -0.01131831482052803, 0.004222669173032045],
# [0.016634931787848473, 0.020965641364455223, -0.9996417760848999],
# [0.0036209800746291876, 0.019935956224799156, 0.9997947216033936],
# [0.005358513910323381, -0.022407088428735733, -0.9997345805168152]]

# 2nd round
# points = [[0.9936381578445435, 0.009030514396727085, -0.11225636303424835],
# [-0.008727988228201866, 0.9950359463691711, -0.09913373738527298],
# [-0.9979364275932312, -0.011402626521885395, -0.06318752467632294],
# [-0.9997996091842651, 0.010556948371231556, -0.017008427530527115],
# [0.014660135842859745, 0.9995391368865967, -0.026583578437566757],
# [0.9998299479484558, -0.01625846140086651, 0.008707503788173199],
# [0.011691824533045292, 0.0026092887856066227, -0.9999282360076904],
# [-0.031458593904972076, 0.009551062248647213, 0.9994592666625977],
# [-0.0006667922716587782, 0.0015649429988116026, -0.9999985694885254]]

# 1st round on iPhone 6s plus:
# points = [[0.993816077709198, 0.004932483192533255, -0.11092860251665115],
# [-0.00642493087798357, 0.9934148788452148, -0.11430618166923523],
# [-0.9998900294303894, -0.004638722166419029, -0.012982611544430256],
# [-0.9999798536300659, -0.002919797319918871, -0.0013887309469282627],
# [-0.003486435627564788, 0.9999765157699585, 0.003355954773724079],
# [0.9941743016242981, -0.003768238937482238, 0.10760145634412766],
# [-0.005986716132611036, 0.008993090130388737, -0.9999416470527649],
# [-0.004155817441642284, 0.0050642224960029125, 0.9999681711196899],
# [0.018571261316537857, -0.0032481492962688208, -0.9998222589492798]]

# 2nd round
points = [[0.9992848634719849, 0.005866524763405323, -0.03729401156306267],
[-0.004687385633587837, 0.9992965459823608, -0.0370924174785614],
[-0.9994162917137146, -0.004804843571037054, -0.03359886631369591],
[-0.9989989399909973, 0.0009055265691131353, -0.04456580430269241],
[0.0030393055640161037, 0.9999074935913086, 0.01207822747528553],
[0.9981199502944946, -0.004682349972426891, 0.0606144480407238],
[0.005932874511927366, 0.008223622106015682, -0.9999485611915588],
[-0.0134310657158494, 0.005170051008462906, 0.9998210668563843],
[0.013126873411238194, -0.002841283567249775, -0.9999098181724548]]

c = Calibraxis(verbose=True)
c.add_points(points)
c.calibrate_accelerometer()

print(c.bias_vector)
print(c.scale_factor_matrix)

outputJson = dict()
outputJson['bias'] = [e for e in c.bias_vector]
outputJson['scaleFactorMatrix'] = [[e for e in a] for a in c.scale_factor_matrix]
filename = 'calibrationData.json'

with open(filename, 'w') as outfile:
    json.dump(outputJson, outfile)

print(f"Wrote to {filename}")
